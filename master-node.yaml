Description: >
  Kubernetes Cluster Master and Node Setup

Parameters:
  Subnet1:
    Type: AWS::EC2::Subnet::Id

  Subnet2:
    Type: AWS::EC2::Subnet::Id

  Subnet3:
    Type: AWS::EC2::Subnet::Id

  ClusterName:
    Type: String

  KubernetesVersion:
    Type: String

  DockerVersion:
    Type: String

  PodNetworkCIDR:
    Type: String

  LoadBalancerDNS:
    Type: String

  KubernetesToken:
    Type: String

  FlannelVersion:
    Type: String

  TraefikVersion:
    Type: String

  MasterInstanceType:
    Type: String

  NodeInstanceType:
    Type: String

  WorkerDiskSpace:
    Type: String

  MasterDiskSpace:
    Type: String

  ImageId:
    Type: AWS::EC2::Image::Id

  MasterAPITargetGroup:
    Type: String

  NodeHTTPTargetGroup:
    Type: String

  NodeHTTPSTargetGroup:
    Type: String

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName

  VpcId:
    Type: AWS::EC2::VPC::Id
    


Resources:
  
  # Master: File System
  MasterFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      FileSystemTags:
        - Key: Name
          Value: !Sub ${ClusterName}-master
  
  MasterSubnetId1MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref MasterFileSystem
      SubnetId: !Ref Subnet1
      SecurityGroups: 
        - !Ref MasterSecurityGroup
  
  MasterSubnetId2MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref MasterFileSystem
      SubnetId: !Ref Subnet2
      SecurityGroups: 
        - !Ref MasterSecurityGroup

  MasterSubnetId3MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref MasterFileSystem
      SubnetId: !Ref Subnet3
      SecurityGroups: 
        - !Ref MasterSecurityGroup

  # Master: IAM Role
  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /kubernetes/
      Roles:
        - !Ref MasterRole
  
  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-master
      Path: /kubernetes/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${ClusterName}-master
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Resource: "*"
                Action: 
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
              - Effect: "Allow"
                Resource: "*"
                Condition:
                  StringEquals:
                    ec2:ResourceTag/KubernetesCluster: !Ref AWS::StackName
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateVolume
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
  
  MasterLaunchConfigurtion:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: MasterEIP
    Metadata:
      AWS::CloudFormation::Init: 
        configSets:
          master:
            - associateEip
            - mountEFS
            - mountEBS
            - installDocker
            - installKubernetes
            - initialiseKubernetes
          worker:
            - mountEBS
            - installDocker
            - installKubernetes
            - joinCluster
        associateEip:
          commands:
            10downloadPipScript:
              command: curl -o /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py
            20installPip:
              command: python /tmp/get-pip.py
            30installAwsCli:
              command: pip install awscli --upgrade
            40associateEip:
              command: !Sub aws ec2 associate-address --region ${AWS::Region} --allocation-id ${MasterEIP.AllocationId} --instance-id $(curl http://169.254.169.254/latest/meta-data/instance-id)
        mountEFS:
          packages:
            yum:
              nfs-utils: []
          commands:
            10createMountDirectory:
              command: mkdir -p /mnt/efs
            20mount:
              command: !Sub mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${MasterFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
            30createPersistentDirectories:
              command: mkdir -p /mnt/efs/kubernetes /mnt/efs/etcd
            40linkEtcdDirectory:
              command: ln -s /mnt/efs/etcd /var/lib/etcd
            50linkKubernetesDirectory:
              command: ln -s /mnt/efs/kubernetes /etc/kubernetes
        mountEBS:
          commands:
            10format:
              command: mkfs -t ext4 /dev/xvdb
            20createMountDirectory:
              command: mkdir -p /var/lib/docker
            30mount:
              command: mount /dev/xvdb /var/lib/docker
        installDocker:
          packages:
            yum: 
              yum-utils: []
              device-mapper-persistent-data: []
              lvm2: []
          commands:
            10addDockerRepo:
              command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            20installDocker:
              command: !Sub yum install -y docker-${DockerVersion}
            30startDocker:
              command: systemctl enable docker.service && systemctl start docker.service
        installKubernetes:
          commands:
            10disableSELinux:
              command: setenforce 0
            20installKubernetes:
              command: !Sub yum install -y kubelet-${KubernetesVersion} kubeadm-${KubernetesVersion} kubectl-${KubernetesVersion}
            30startKubernetes:
              command: systemctl daemon-reload && systemctl enable kubelet
            40addMasterToEtcHosts:
              command: !Sub echo ${MasterEIP} master >> /etc/hosts
          files:
            /etc/yum.repos.d/kubernetes.repo:
              content: |
                [kubernetes]
                name=Kubernetes
                baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
                enabled=1
                gpgcheck=1
                repo_gpgcheck=1
                gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        initialiseKubernetes:
          commands:
            10setHostname:
              command: hostnamectl set-hostname --static master
            20initialiseKubernetes:
              command: bash /tmp/cfn-initialise-kubernetes.sh
              test: "! test -e /etc/kubernetes/admin.conf"
            30startKubernetes:
              command: systemctl start kubelet
              test: "! systemctl status kubelet"
          files:
            /tmp/cfn-initialise-kubernetes.sh:
              content: !Sub |
                #!/bin/bash
                # See https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
                kubeadm init                                                            \
                  --kubernetes-version v${KubernetesVersion}                            \
                  --pod-network-cidr ${PodNetworkCIDR}                                  \
                  --apiserver-advertise-address ${LoadBalancerDNS}                 \
                  --apiserver-cert-extra-sans ${LoadBalancerDNS}                   \
                  --token ${KubernetesToken}                                            \
                  --token-ttl 0
                
                # Needed until https://github.com/kubernetes/kubeadm/issues/411 is fixed
                sed -i 's#https://.*:6443$#https://${LoadBalancerDNS}:6443#' /etc/kubernetes/admin.conf
                export KUBECONFIG=/etc/kubernetes/admin.conf

                # See https://github.com/coreos/flannel
                kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v${FlannelVersion}/Documentation/kube-flannel.yml

                # See https://docs.traefik.io/user-guide/kubernetes/
                kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v${TraefikVersion}/examples/k8s/traefik-rbac.yaml
                kubectl apply -f https://raw.githubusercontent.com/containous/traefik/v${TraefikVersion}/examples/k8s/traefik-ds.yaml
        joinCluster:
          commands:
            10join:
              command: !Sub kubeadm join --token ${KubernetesToken} --discovery-token-unsafe-skip-ca-verification ${LoadBalancerDNS}:6443
    Properties:
      SecurityGroups: 
        - !Ref MasterSecurityGroup
      ImageId: !Ref ImageId
      InstanceType: !Ref MasterInstanceType
      IamInstanceProfile: !Ref MasterInstanceProfile
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: !Ref MasterDiskSpace
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash

            # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            cfn-init --stack ${AWS::StackName} --resource MasterLaunchConfigurtion --configsets master
  
  MasterAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MasterFileSystem
    Properties:
      LaunchConfigurationName: !Ref MasterLaunchConfigurtion
      VPCZoneIdentifier: 
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      MinSize: "0"
      DesiredCapacity: "1"
      MaxSize: "1"
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master
          PropagateAtLaunch: true
        - Key: KubernetesCluster
          Value: !Ref ClusterName
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref MasterAPITargetGroup
  
  MasterEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${ClusterName}-master
      GroupDescription: Kubernetes Master Security Group
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  
  
  MasterSecurityGroupEfsMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
  
  
  MasterSecurityGroupEtcdMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: tcp
      FromPort: 2379
      ToPort: 2380
  
  MasterSecurityGroupEtcdNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 2379
      ToPort: 2380
  
  
  MasterSecurityGroupFlannelUDPMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: udp
      FromPort: 8285
      ToPort: 8285
  
  MasterSecurityGroupFlannelVXLanMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: udp
      FromPort: 8472
      ToPort: 8472
  
  MasterSecurityGroupFlannelUDPNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: udp
      FromPort: 8285
      ToPort: 8285
  
  MasterSecurityGroupFlannelVXLanNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: udp
      FromPort: 8472
      ToPort: 8472

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /kubernetes/
      Roles:
        - !Ref NodeRole
  
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-node
      Path: /kubernetes/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${ClusterName}-node
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Resource: "*"
                Action: 
                  - ec2:DescribeInstances
  
  
  NodeLaunchConfigurtion:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref NodeInstanceType
      IamInstanceProfile: !Ref NodeInstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroups: 
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: !Ref WorkerDiskSpace
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            
            # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            cfn-init --stack ${AWS::StackName} --resource MasterLaunchConfigurtion --configsets worker
  
  NodeAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref NodeLaunchConfigurtion
      VPCZoneIdentifier: 
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      MinSize: "0"
      DesiredCapacity: "0"
      MaxSize: "6"
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-node
          PropagateAtLaunch: true
        - Key: KubernetesCluster
          Value: !Ref ClusterName
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref NodeHTTPTargetGroup
        - !Ref NodeHTTPSTargetGroup

 
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${ClusterName}-node
      GroupDescription: Kubernetes Node Security Group
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-node
        - Key: KubernetesCluster
          Value: !Ref ClusterName
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
  
  NodeSecurityGroupNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
  
  NodeSecurityGroupMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: "-1"

